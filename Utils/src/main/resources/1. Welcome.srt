0
00:00:00,150 --> 00:00:00,590
Alright
好吧

1
00:00:00,590 --> 00:00:02,270
 so we are done with intimidated question 
所以我们就不再提这个吓人的问题了

2
00:00:02,270 --> 00:00:03,190
And next
接下来呢

3
00:00:03,190 --> 00:00:05,750
 we're going to enter the difficult section
我们将进入困难的部分

4
00:00:05,910 --> 00:00:09,970
 so you might not be asked this question for all usually job interview
所以在所有的面试中，你可能都不会被问到这个问题

5
00:00:09,970 --> 00:00:12,600
 but some companies might ask you for this
但有些公司可能会问你这个问题

6
00:00:12,680 --> 00:00:15,582
 so if you really wanna be 100 percent ready
所以如果你真的想百分之百的准备好

7
00:00:15,582 --> 00:00:16,937
 then do follow this section
那么一定要遵循这一节

8
00:00:16,937 --> 00:00:20,033
 and it's also a good way to push your knowledge in solidity 
同时，这也是一个很好的方法来巩固你的知识

9
00:00:20,033 --> 00:00:23,130
What is the A B I encode review programme statement 
什么是A B I编码审查计划声明

10
00:00:23,300 --> 00:00:29,882
This is a pragma statement that is used to enable experimental features not yet enable instant absolutely 
这是一条pragma语句，用于启用尚未完全启用即时功能的实验功能

11
00:00:29,882 --> 00:00:30,540
For example
例如

12
00:00:30,540 --> 00:00:34,710
 it enables to retain a struck from a function called externally
它允许保留从外部调用的函数发出的消息

13
00:00:34,790 --> 00:00:37,590
 which is not possible yet in standard solidity 
这在标准的坚固性中是不可能的

14
00:00:38,030 --> 00:00:42,020
Is it safe to use the abi encoder-v2 pregnant statement in production 
在生产中使用abi编码器版本2的声明安全吗

15
00:00:42,540 --> 00:00:42,742
No
不

16
00:00:42,742 --> 00:00:44,970
 it should only be used in development
它应该只用于开发环境

17
00:00:44,970 --> 00:00:45,983
 not in production 
不是生产环境

18
00:00:45,983 --> 00:00:50,439
Is it possible to send a transaction without requiring users to pay gas
是否可以在不要求用户支付燃气费用的情况下发送交易

19
00:00:50,439 --> 00:00:52,870
 so that's what we call a gas less transaction 
这就是我们所说的无气交易

20
00:00:53,200 --> 00:00:54,030
And yes
是的

21
00:00:54,030 --> 00:00:54,780
 it's possible
这是可能的

22
00:00:55,220 --> 00:00:59,730
 so the wait work is you would ask users to first sign a message on the front end
因此，等待工作是要求用户首先在前端签署一条消息

23
00:00:59,940 --> 00:01:03,760
 then the message and signature would be sent to a centralized bacon
然后，消息和签名将被发送到一个集中式服务器

24
00:01:03,940 --> 00:01:05,977
 so that would be in your application
所以这会出现在你的申请表中

25
00:01:05,977 --> 00:01:07,458
 and that would be off chain 
这将是脱节的

26
00:01:07,458 --> 00:01:13,200
And this backend would create a transaction and embed the payloads of the message plus a signature into it 
这个后端将创建一个事务，并将消息的有效负载和签名嵌入其中

27
00:01:13,200 --> 00:01:18,450
That means that the gas fees will be covered by the wallet of the app instead of the user wallet on Chen
这意味着汽油费将由应用程序的钱包支付，而不是由Chen的用户钱包支付

28
00:01:18,450 --> 00:01:24,690
 a spot contract will verify the validity of the signature and perform an operation on behalf of the user
现场合同将验证签名的有效性，并代表用户执行操作

29
00:01:25,310 --> 00:01:28,790
 which solidity function would you use to verify a signature
您将使用哪一个solidity函数来验证签名

30
00:01:29,360 --> 00:01:31,050
 you need to use easy recover 
您需要使用easy recover

31
00:01:32,020 --> 00:01:34,330
What is a library in solidity
什么是坚固的图书馆

32
00:01:34,730 --> 00:01:38,980
 a library is a piece of code that can be reused by other smart contract 
库是一段可以被其他智能合约重用的代码

33
00:01:39,240 --> 00:01:43,718
There are two types of libraries deploy and embedded deploy libraries 
有两种类型的库部署和嵌入式部署库

34
00:01:43,718 --> 00:01:47,910
Have their own address and they can be used by several other smart contracts 
有自己的地址，可以被其他几个智能合约使用

35
00:01:47,910 --> 00:01:54,490
Embedded libraries don't have their own address and are deployed as part of the code of the smart contract library 
嵌入式库没有自己的地址，并且作为智能合约库代码的一部分进行部署

36
00:01:54,490 --> 00:01:56,060
Don't have their own storage 
没有自己的存储空间

37
00:01:56,060 --> 00:01:58,890
They only provide function for other smart contract
它们只为其他智能合约提供功能

38
00:01:59,670 --> 00:02:03,320
 give an example of how to use a library in a smart contract 
举例说明如何在智能合约中使用库

39
00:02:03,890 --> 00:02:04,800
In this example 
在这个例子中

40
00:02:04,800 --> 00:02:07,900
We are going to use a library to add two integers 
我们将使用一个库来添加两个整数

41
00:02:08,140 --> 00:02:08,500
First
第一

42
00:02:08,500 --> 00:02:09,850
 we define a library
我们定义了一个库

43
00:02:10,300 --> 00:02:15,400
 and after we have a smart contract with an ad function that make use of this library
在我们有了一个智能合约和一个利用这个库的广告功能之后

44
00:02:15,760 --> 00:02:16,820
 then it's smart contract 
那么这就是智能合约

45
00:02:16,820 --> 00:02:17,150
A 
A.

46
00:02:17,150 --> 00:02:22,140
We use the using keyword to attach the library to the individual ties 
我们使用using关键字将库附加到各个关系

47
00:02:22,390 --> 00:02:29,120
That means that all the function of the library will be callable for each integer inside smart contract a
这意味着，对于智能合约a中的每个整数，都可以调用库的所有函数

48
00:02:29,360 --> 00:02:33,850
 and we can see this in action in the ad function of smart contract a 
我们可以在智能合约a的广告功能中看到这一点

49
00:02:34,110 --> 00:02:38,420
So instead of just using the plus operator to add a and B
因此，不只是使用加号操作符来添加a和B

50
00:02:38,420 --> 00:02:41,810
 we actually use the add function of our library
我们实际上使用了我们库的add函数

51
00:02:42,040 --> 00:02:42,800
 and for that
为此

52
00:02:42,800 --> 00:02:44,510
 we use the dot notation
我们使用点符号

53
00:02:44,630 --> 00:02:45,505
 so a dot add
所以一个点加上

54
00:02:45,505 --> 00:02:48,570
 and we pass the B variable to the ad function 
我们将B变量传递给ad函数

55
00:02:48,570 --> 00:02:52,072
So this add function is the add function of our library 
所以这个add函数就是我们库的add函数

56
00:02:52,072 --> 00:02:57,326
And you will notice that even though the ad function of the library takes two arguments
您会注意到，尽管库的ad函数有两个参数

57
00:02:57,326 --> 00:03:02,790
 we only pass it one hour argument because the first argument will be a in this case
我们只传递一个小时的参数，因为在这种情况下，第一个参数将是a

58
00:03:03,040 --> 00:03:10,660
 and the argument that we pass between parentheses will be the second argument when a library is embedded versus deployed 
我们在括号之间传递的参数将是嵌入库与部署库时的第二个参数

59
00:03:11,180 --> 00:03:15,082
A library will be embedded if it provides internal function
如果一个库提供内部功能，它将被嵌入

60
00:03:15,082 --> 00:03:18,984
 internal function can only be called by the same smart contract
内部函数只能由同一智能合约调用

61
00:03:18,984 --> 00:03:20,010
 deploy libraries
部署库

62
00:03:20,010 --> 00:03:21,037
 on the other hand
另一方面

63
00:03:21,037 --> 00:03:22,270
 have public functions 
有公共职能

64
00:03:22,680 --> 00:03:24,920
What is a re-entrance C attack
什么是重新进入C攻击

65
00:03:25,610 --> 00:03:29,340
 so a re-entrance attack happens between two smart contracts
因此，在两个智能合约之间会发生重新进入攻击

66
00:03:29,340 --> 00:03:31,410
 so let's consider this example
让我们来考虑这个例子。

67
00:03:31,600 --> 00:03:32,900
 so we have a contract 
所以我们有合同

68
00:03:32,900 --> 00:03:35,160
A any contract b the contract
A任何合同b合同

69
00:03:35,160 --> 00:03:38,880
 a hold some ether on behalf of some other addresses
代表其他地址保存一些以太

70
00:03:39,000 --> 00:03:41,810
 and it has a paid function to restore this ether
它有一个付费功能来恢复这个乙醚

71
00:03:42,000 --> 00:03:44,220
 and the contract b is the attacker
合同b就是攻击者

72
00:03:44,220 --> 00:03:46,100
 and it has some ether in contract 
合同中有一些乙醚

73
00:03:46,100 --> 00:03:48,230
A the attack is going to work this way
A攻击将以这种方式进行

74
00:03:48,460 --> 00:03:52,180
 so contract b is going to call the page a function in the contract
合同b将在合同中调用页面a函数

75
00:03:52,180 --> 00:03:52,620
 a 
A.

76
00:03:52,830 --> 00:04:01,300
So this pay function takes two argument and address where we want to send the ether and an integer amount to specify how much we want to send 
所以这个pay函数有两个参数和地址，我们想把以太发送到哪里，还有一个整数来指定我们想发送多少

77
00:04:01,540 --> 00:04:02,100
So first
所以首先

78
00:04:02,100 --> 00:04:05,930
 the pay function check if the balance of the sender is enough
支付功能检查发件人的余额是否足够

79
00:04:06,220 --> 00:04:08,470
 so the attacker will choose an amount
因此，攻击者将选择一个数量

80
00:04:08,470 --> 00:04:12,580
 which is less or equal to its balance that this if condition passes
它小于或等于它的平衡，如果条件通过

81
00:04:12,710 --> 00:04:18,900
 then the paid function is going to call the bat function on contract b and send it some either 
然后paid函数将调用合同b上的bat函数，并将其发送给

82
00:04:19,020 --> 00:04:22,730
And finally is going to decrease the balance of the center 
最后会减少中心的平衡

83
00:04:22,940 --> 00:04:26,275
The problem is in the bad function of contract b 
问题在于合同b的功能不好

84
00:04:26,275 --> 00:04:29,833
We actually call back the pay function of contract a
我们实际上调用了合同a的支付函数

85
00:04:29,833 --> 00:04:31,168
 and when this happened
这件事发生的时候

86
00:04:31,168 --> 00:04:33,614
 if condition is going to pass again
如果情况再次出现

87
00:04:33,614 --> 00:04:34,948
 because at this stage
因为在这个阶段,

88
00:04:34,948 --> 00:04:38,250
 we haven't decreased the balance of the center
我们没有减少中心的平衡

89
00:04:38,590 --> 00:04:44,980
 so a is going to call the bad function of contract b again and sending sub ether again 
所以a将再次调用合同b的坏函数，并再次发送子以太

90
00:04:45,360 --> 00:04:49,920
And the loop is going to continue until all all the ethos of contract a will
这种循环将继续下去，直到所有的契约精神都将成为一种意志

91
00:04:49,920 --> 00:04:52,250
 a big drain and send to contract b 
a大排水管并发送至合同b

92
00:04:52,510 --> 00:04:56,880
So that's exactly what happened in the dao attack in 2016
这就是2016年dao攻击中发生的情况

93
00:04:58,270 --> 00:05:00,970
 how to prevent against a re-entrance attack
如何防止重新进入攻击

94
00:05:01,620 --> 00:05:03,180
 so there are several solution 
所以有几种解决方案

95
00:05:03,310 --> 00:05:10,250
The first solution is to decrease the binds or do other state variable updates before you call another contract 
第一种解决方案是在调用另一个契约之前减少绑定或执行其他状态变量更新

96
00:05:10,250 --> 00:05:14,798
The second solution is to is to put in place a re-entrance C guard
第二个解决方案是设置一个重新进入C区的警卫

97
00:05:14,798 --> 00:05:18,725
 you can find an example of height works in the open zipper framework 
您可以在开放式拉链框架中找到高度工作的示例

98
00:05:18,725 --> 00:05:19,345
And finally
最后

99
00:05:19,345 --> 00:05:25,484
 you can limit the gas available to the gold contract this way if the call contract is trying to do an attack
如果呼叫合同试图进行攻击，您可以通过这种方式限制黄金合同的可用气体

100
00:05:25,484 --> 00:05:27,512
 it doesn't have enough gas to do this 
它没有足够的汽油来做这件事

101
00:05:27,512 --> 00:05:30,554
If you send either using the transfer of function
如果您使用传递函数发送

102
00:05:30,554 --> 00:05:32,380
 this is done automatically for you 
这是为您自动完成的

103
00:05:33,290 --> 00:05:40,400
How to produce a hash of multiple values in solidity first need to use the ABI dot encode pack function
如何生成多个值的散列，首先需要使用ABI dot encode pack函数

104
00:05:40,400 --> 00:05:42,660
 you can give it as many argument as you want 
你想说多少就说多少

105
00:05:42,970 --> 00:05:48,143
The argument are the data that you want to ash to this ankle bike function will return A bytes 
该参数是您希望传递给此函数的数据，该函数将返回一个字节

106
00:05:48,143 --> 00:05:50,684
So which is an arbitrary size array of bikes
那么这是一个任意大小的自行车数组

107
00:05:50,684 --> 00:05:51,955
 so you can have any length 
所以你可以有任何长度

108
00:05:51,955 --> 00:05:53,407
But the thing is with a hash
但问题是有一个杂烩

109
00:05:53,407 --> 00:05:55,222
 you wanna have a fixed size length
你想要一个固定尺寸的长度吗

110
00:05:55,222 --> 00:05:55,767
 so for that
因此

111
00:05:55,767 --> 00:05:58,490
 you're going to use the ketchup to 56 function 
你要用番茄酱来做这个功能

112
00:05:58,520 --> 00:06:04,500
And it's going to produce a bicycle to how to generate a random integer in solidity 
它将产生一个自行车，来研究如何生成一个随机整数

113
00:06:04,910 --> 00:06:13,534
We can leverage the block time stamp and the block difficulty as a source of randomness and use the ketchup 256 hashing function 
我们可以利用块时间戳和块难度作为随机性的来源，并使用ketchup 256哈希函数

114
00:06:13,534 --> 00:06:13,935
First
第一

115
00:06:13,935 --> 00:06:19,190
 we need to use the encode function and give it the block time stamp and the block difficulty 
我们需要使用编码函数，并给它块时间戳和块难度

116
00:06:19,230 --> 00:06:22,310
And we will hash this with a catch up to 56 function
我们将使用catch-up-to-56函数对其进行散列

117
00:06:22,310 --> 00:06:23,120
 and finally 
最后

118
00:06:23,120 --> 00:06:30,395
We will cast the result into an integer you need to be aware that minor skin manipulate block difficulty and block time stamp 
我们将把结果转换成一个整数，您需要知道，较小的蒙皮操作块难度和块时间戳

119
00:06:30,395 --> 00:06:32,938
So this method is not 100 percent secure
所以这种方法不是100%安全的

120
00:06:32,938 --> 00:06:34,307
 and generally speaking
一般来说

121
00:06:34,307 --> 00:06:38,220
 random number generation is a very difficult thing in smart contract 
在智能合约中，随机数的生成是一件非常困难的事情

122
00:06:38,510 --> 00:06:41,760
What are the two kind of assembly in solidity
两种坚固的组件是什么

123
00:06:41,760 --> 00:06:45,760
 functional and instructional functional uses a function
功能和教学功能使用一个函数

124
00:06:45,760 --> 00:06:49,510
 whereas instructional is just a series of roll up codes
而教学只是一系列的汇总代码

125
00:06:50,050 --> 00:06:52,140
 most people use the functional style
大多数人使用功能性风格

126
00:06:52,760 --> 00:06:54,230
 how to declare assembly good
如何声明组装良好

127
00:06:54,830 --> 00:06:58,097
 we need to use the assembly keyword and use curly braces 
我们需要使用assembly关键字并使用大括号

128
00:06:58,097 --> 00:07:01,160
Everything inside the curly braces is assembly good
花括号内的一切都很好

129
00:07:01,870 --> 00:07:07,010
 create a function to determine if another address is a contract or a regular address 
创建一个函数以确定另一个地址是合同地址还是常规地址

130
00:07:08,600 --> 00:07:09,012
Alright
好吧

131
00:07:09,012 --> 00:07:09,632
 so for this
那么对于这个

132
00:07:09,632 --> 00:07:10,664
 you need assembly 
你需要组装

133
00:07:10,664 --> 00:07:13,967
So we're gonna create a function called is human
所以我们要创建一个叫做is human的函数

134
00:07:13,967 --> 00:07:15,412
 so this is in regulatory 
所以这是在监管方面

135
00:07:15,412 --> 00:07:18,921
This function is gonna accept a single address argument 
此函数将接受一个地址参数

136
00:07:18,921 --> 00:07:20,160
That's the address check
这是地址检查

137
00:07:20,280 --> 00:07:22,539
 then we define a connect variable
然后我们定义一个连接变量

138
00:07:22,539 --> 00:07:23,895
 which is an integer
哪个是整数

139
00:07:23,895 --> 00:07:26,155
 then we define an assembly block
然后我们定义一个装配块

140
00:07:26,155 --> 00:07:28,866
 and we use the E V M upgrade x code size 
我们使用E V M升级x代码大小

141
00:07:28,866 --> 00:07:32,708
We can basically give us the cut side of a specific address
我们基本上可以给我们一个特定地址的切面

142
00:07:32,708 --> 00:07:40,280
 and we stole the resort in the code length variable and after outside the assembly block in the written statement
我们在代码长度变量中偷取了resort，在编写语句的汇编块之外偷取了resort

143
00:07:40,280 --> 00:07:41,870
 we check if this code length is 0 
我们检查此代码长度是否为0

144
00:07:42,140 --> 00:07:44,500
If there is no code associated to an address
如果没有与地址关联的代码

145
00:07:44,500 --> 00:07:47,070
 then that means that this is not a spot contracts 
那就意味着这不是现货合约

146
00:07:47,070 --> 00:07:48,670
This is a regular dress 
这是一件普通的连衣裙

147
00:07:48,670 --> 00:07:49,740
We will return true
我们会回到现实

148
00:07:49,740 --> 00:07:51,540
 otherwise we return false
否则我们返回false

149
00:07:52,240 --> 00:07:59,060
 so this is really a typical case of something that you can do only with assembly and not possible just with solidity
所以这是一个典型的例子，你只能用组装来完成，而不能用坚固性来完成

150
00:07:59,500 --> 00:08:00,140
 alright 
好吧

151
00:08:00,140 --> 00:08:02,580
So that was the last question of this huge video
所以这是这个大型视频的最后一个问题

152
00:08:02,580 --> 00:08:07,646
 so a big congratulation for following up to that was a really long video
因此，对这段视频的后续行动表示热烈祝贺是一段很长的视频

153
00:08:07,646 --> 00:08:14,940
 but I hope that you'll learn a lot of new things in society that now if you're really ready for you suitable job interview 
但我希望你能在社会上学到很多新东西，如果你真的准备好参加合适的工作面试的话

